// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPackageInfos(t *testing.T) {
	t.Parallel()

	query := PackageInfos(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPackageInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = packageInfo.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPackageInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PackageInfos(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPackageInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PackageInfoSlice{packageInfo}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPackageInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PackageInfoExists(tx, packageInfo.ID)
	if err != nil {
		t.Errorf("Unable to check if PackageInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PackageInfoExistsG to return true, but got false.")
	}
}
func testPackageInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	packageInfoFound, err := FindPackageInfo(tx, packageInfo.ID)
	if err != nil {
		t.Error(err)
	}

	if packageInfoFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPackageInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PackageInfos(tx).Bind(packageInfo); err != nil {
		t.Error(err)
	}
}

func testPackageInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PackageInfos(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPackageInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfoOne := &PackageInfo{}
	packageInfoTwo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfoOne, packageInfoDBTypes, false, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, packageInfoTwo, packageInfoDBTypes, false, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = packageInfoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PackageInfos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPackageInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	packageInfoOne := &PackageInfo{}
	packageInfoTwo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfoOne, packageInfoDBTypes, false, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, packageInfoTwo, packageInfoDBTypes, false, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = packageInfoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func packageInfoBeforeInsertHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoAfterInsertHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoAfterSelectHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoBeforeUpdateHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoAfterUpdateHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoBeforeDeleteHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoAfterDeleteHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoBeforeUpsertHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func packageInfoAfterUpsertHook(e boil.Executor, o *PackageInfo) error {
	*o = PackageInfo{}
	return nil
}

func testPackageInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &PackageInfo{}
	o := &PackageInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, packageInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PackageInfo object: %s", err)
	}

	AddPackageInfoHook(boil.BeforeInsertHook, packageInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	packageInfoBeforeInsertHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.AfterInsertHook, packageInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	packageInfoAfterInsertHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.AfterSelectHook, packageInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	packageInfoAfterSelectHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.BeforeUpdateHook, packageInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	packageInfoBeforeUpdateHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.AfterUpdateHook, packageInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	packageInfoAfterUpdateHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.BeforeDeleteHook, packageInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	packageInfoBeforeDeleteHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.AfterDeleteHook, packageInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	packageInfoAfterDeleteHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.BeforeUpsertHook, packageInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	packageInfoBeforeUpsertHooks = []PackageInfoHook{}

	AddPackageInfoHook(boil.AfterUpsertHook, packageInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	packageInfoAfterUpsertHooks = []PackageInfoHook{}
}
func testPackageInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPackageInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx, packageInfoColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPackageInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = packageInfo.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPackageInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PackageInfoSlice{packageInfo}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPackageInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PackageInfos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	packageInfoDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `Name`: `text`, `NewRelease`: `text`, `NewVersion`: `text`, `Release`: `text`, `Repository`: `text`, `UpdatedAt`: `timestamp with time zone`, `Version`: `text`}
	_                  = bytes.MinRead
)

func testPackageInfosUpdate(t *testing.T) {
	t.Parallel()

	if len(packageInfoColumns) == len(packageInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	if err = packageInfo.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPackageInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(packageInfoColumns) == len(packageInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	packageInfo := &PackageInfo{}
	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, packageInfo, packageInfoDBTypes, true, packageInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(packageInfoColumns, packageInfoPrimaryKeyColumns) {
		fields = packageInfoColumns
	} else {
		fields = strmangle.SetComplement(
			packageInfoColumns,
			packageInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(packageInfo))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PackageInfoSlice{packageInfo}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPackageInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(packageInfoColumns) == len(packageInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	packageInfo := PackageInfo{}
	if err = randomize.Struct(seed, &packageInfo, packageInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = packageInfo.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PackageInfo: %s", err)
	}

	count, err := PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &packageInfo, packageInfoDBTypes, false, packageInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PackageInfo struct: %s", err)
	}

	if err = packageInfo.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PackageInfo: %s", err)
	}

	count, err = PackageInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
