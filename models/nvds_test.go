// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testNVDS(t *testing.T) {
	t.Parallel()

	query := NVDS(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testNVDSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = nvd.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNVDSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = NVDS(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNVDSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NVDSlice{nvd}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testNVDSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NVDExists(tx, nvd.ID)
	if err != nil {
		t.Errorf("Unable to check if NVD exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NVDExistsG to return true, but got false.")
	}
}
func testNVDSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	nvdFound, err := FindNVD(tx, nvd.ID)
	if err != nil {
		t.Error(err)
	}

	if nvdFound == nil {
		t.Error("want a record, got nil")
	}
}
func testNVDSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = NVDS(tx).Bind(nvd); err != nil {
		t.Error(err)
	}
}

func testNVDSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := NVDS(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNVDSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvdOne := &NVD{}
	nvdTwo := &NVD{}
	if err = randomize.Struct(seed, nvdOne, nvdDBTypes, false, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}
	if err = randomize.Struct(seed, nvdTwo, nvdDBTypes, false, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvdOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = nvdTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := NVDS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNVDSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	nvdOne := &NVD{}
	nvdTwo := &NVD{}
	if err = randomize.Struct(seed, nvdOne, nvdDBTypes, false, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}
	if err = randomize.Struct(seed, nvdTwo, nvdDBTypes, false, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvdOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = nvdTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func nvdBeforeInsertHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdAfterInsertHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdAfterSelectHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdBeforeUpdateHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdAfterUpdateHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdBeforeDeleteHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdAfterDeleteHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdBeforeUpsertHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func nvdAfterUpsertHook(e boil.Executor, o *NVD) error {
	*o = NVD{}
	return nil
}

func testNVDSHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &NVD{}
	o := &NVD{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, nvdDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NVD object: %s", err)
	}

	AddNVDHook(boil.BeforeInsertHook, nvdBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	nvdBeforeInsertHooks = []NVDHook{}

	AddNVDHook(boil.AfterInsertHook, nvdAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	nvdAfterInsertHooks = []NVDHook{}

	AddNVDHook(boil.AfterSelectHook, nvdAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	nvdAfterSelectHooks = []NVDHook{}

	AddNVDHook(boil.BeforeUpdateHook, nvdBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	nvdBeforeUpdateHooks = []NVDHook{}

	AddNVDHook(boil.AfterUpdateHook, nvdAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	nvdAfterUpdateHooks = []NVDHook{}

	AddNVDHook(boil.BeforeDeleteHook, nvdBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	nvdBeforeDeleteHooks = []NVDHook{}

	AddNVDHook(boil.AfterDeleteHook, nvdAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	nvdAfterDeleteHooks = []NVDHook{}

	AddNVDHook(boil.BeforeUpsertHook, nvdBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	nvdBeforeUpsertHooks = []NVDHook{}

	AddNVDHook(boil.AfterUpsertHook, nvdAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	nvdAfterUpsertHooks = []NVDHook{}
}
func testNVDSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNVDSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx, nvdColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNVDSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = nvd.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNVDSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NVDSlice{nvd}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testNVDSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := NVDS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	nvdDBTypes = map[string]string{`AccessComplexity`: `text`, `AccessVector`: `text`, `Authentication`: `text`, `AvailabilityImpact`: `text`, `ConfidentialityImpact`: `text`, `CreatedAt`: `timestamp with time zone`, `CveDetailID`: `integer`, `CweID`: `text`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `IntegrityImpact`: `text`, `LastModifiedDate`: `timestamp with time zone`, `PublishedDate`: `timestamp with time zone`, `Score`: `numeric`, `Summary`: `character varying`, `UpdatedAt`: `timestamp with time zone`}
	_          = bytes.MinRead
)

func testNVDSUpdate(t *testing.T) {
	t.Parallel()

	if len(nvdColumns) == len(nvdPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	if err = nvd.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNVDSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(nvdColumns) == len(nvdPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	nvd := &NVD{}
	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, nvd, nvdDBTypes, true, nvdPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(nvdColumns, nvdPrimaryKeyColumns) {
		fields = nvdColumns
	} else {
		fields = strmangle.SetComplement(
			nvdColumns,
			nvdPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(nvd))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NVDSlice{nvd}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testNVDSUpsert(t *testing.T) {
	t.Parallel()

	if len(nvdColumns) == len(nvdPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	nvd := NVD{}
	if err = randomize.Struct(seed, &nvd, nvdDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = nvd.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert NVD: %s", err)
	}

	count, err := NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &nvd, nvdDBTypes, false, nvdPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NVD struct: %s", err)
	}

	if err = nvd.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert NVD: %s", err)
	}

	count, err = NVDS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
