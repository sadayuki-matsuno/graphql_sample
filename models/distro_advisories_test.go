// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testDistroAdvisories(t *testing.T) {
	t.Parallel()

	query := DistroAdvisories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testDistroAdvisoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = distroAdvisory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDistroAdvisoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = DistroAdvisories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDistroAdvisoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DistroAdvisorySlice{distroAdvisory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testDistroAdvisoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := DistroAdvisoryExists(tx, distroAdvisory.ID)
	if err != nil {
		t.Errorf("Unable to check if DistroAdvisory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DistroAdvisoryExistsG to return true, but got false.")
	}
}
func testDistroAdvisoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	distroAdvisoryFound, err := FindDistroAdvisory(tx, distroAdvisory.ID)
	if err != nil {
		t.Error(err)
	}

	if distroAdvisoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testDistroAdvisoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = DistroAdvisories(tx).Bind(distroAdvisory); err != nil {
		t.Error(err)
	}
}

func testDistroAdvisoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := DistroAdvisories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDistroAdvisoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisoryOne := &DistroAdvisory{}
	distroAdvisoryTwo := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisoryOne, distroAdvisoryDBTypes, false, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}
	if err = randomize.Struct(seed, distroAdvisoryTwo, distroAdvisoryDBTypes, false, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = distroAdvisoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := DistroAdvisories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDistroAdvisoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	distroAdvisoryOne := &DistroAdvisory{}
	distroAdvisoryTwo := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisoryOne, distroAdvisoryDBTypes, false, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}
	if err = randomize.Struct(seed, distroAdvisoryTwo, distroAdvisoryDBTypes, false, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = distroAdvisoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func distroAdvisoryBeforeInsertHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryAfterInsertHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryAfterSelectHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryBeforeUpdateHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryAfterUpdateHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryBeforeDeleteHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryAfterDeleteHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryBeforeUpsertHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func distroAdvisoryAfterUpsertHook(e boil.Executor, o *DistroAdvisory) error {
	*o = DistroAdvisory{}
	return nil
}

func testDistroAdvisoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &DistroAdvisory{}
	o := &DistroAdvisory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, distroAdvisoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory object: %s", err)
	}

	AddDistroAdvisoryHook(boil.BeforeInsertHook, distroAdvisoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryBeforeInsertHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.AfterInsertHook, distroAdvisoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryAfterInsertHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.AfterSelectHook, distroAdvisoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryAfterSelectHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.BeforeUpdateHook, distroAdvisoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryBeforeUpdateHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.AfterUpdateHook, distroAdvisoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryAfterUpdateHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.BeforeDeleteHook, distroAdvisoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryBeforeDeleteHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.AfterDeleteHook, distroAdvisoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryAfterDeleteHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.BeforeUpsertHook, distroAdvisoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryBeforeUpsertHooks = []DistroAdvisoryHook{}

	AddDistroAdvisoryHook(boil.AfterUpsertHook, distroAdvisoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	distroAdvisoryAfterUpsertHooks = []DistroAdvisoryHook{}
}
func testDistroAdvisoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDistroAdvisoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx, distroAdvisoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDistroAdvisoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = distroAdvisory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDistroAdvisoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DistroAdvisorySlice{distroAdvisory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testDistroAdvisoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := DistroAdvisories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	distroAdvisoryDBTypes = map[string]string{`AdvisoryID`: `text`, `CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `Issued`: `timestamp with time zone`, `Severity`: `text`, `Updated`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                     = bytes.MinRead
)

func testDistroAdvisoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(distroAdvisoryColumns) == len(distroAdvisoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	if err = distroAdvisory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testDistroAdvisoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(distroAdvisoryColumns) == len(distroAdvisoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	distroAdvisory := &DistroAdvisory{}
	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, distroAdvisory, distroAdvisoryDBTypes, true, distroAdvisoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(distroAdvisoryColumns, distroAdvisoryPrimaryKeyColumns) {
		fields = distroAdvisoryColumns
	} else {
		fields = strmangle.SetComplement(
			distroAdvisoryColumns,
			distroAdvisoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(distroAdvisory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := DistroAdvisorySlice{distroAdvisory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testDistroAdvisoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(distroAdvisoryColumns) == len(distroAdvisoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	distroAdvisory := DistroAdvisory{}
	if err = randomize.Struct(seed, &distroAdvisory, distroAdvisoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = distroAdvisory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert DistroAdvisory: %s", err)
	}

	count, err := DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &distroAdvisory, distroAdvisoryDBTypes, false, distroAdvisoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DistroAdvisory struct: %s", err)
	}

	if err = distroAdvisory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert DistroAdvisory: %s", err)
	}

	count, err = DistroAdvisories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
