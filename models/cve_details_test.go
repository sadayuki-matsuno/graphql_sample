// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCveDetails(t *testing.T) {
	t.Parallel()

	query := CveDetails(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCveDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = cveDetail.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCveDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CveDetails(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCveDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CveDetailSlice{cveDetail}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCveDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CveDetailExists(tx, cveDetail.ID)
	if err != nil {
		t.Errorf("Unable to check if CveDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CveDetailExistsG to return true, but got false.")
	}
}
func testCveDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	cveDetailFound, err := FindCveDetail(tx, cveDetail.ID)
	if err != nil {
		t.Error(err)
	}

	if cveDetailFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCveDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CveDetails(tx).Bind(cveDetail); err != nil {
		t.Error(err)
	}
}

func testCveDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := CveDetails(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCveDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetailOne := &CveDetail{}
	cveDetailTwo := &CveDetail{}
	if err = randomize.Struct(seed, cveDetailOne, cveDetailDBTypes, false, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, cveDetailTwo, cveDetailDBTypes, false, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetailOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cveDetailTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CveDetails(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCveDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cveDetailOne := &CveDetail{}
	cveDetailTwo := &CveDetail{}
	if err = randomize.Struct(seed, cveDetailOne, cveDetailDBTypes, false, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, cveDetailTwo, cveDetailDBTypes, false, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetailOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cveDetailTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func cveDetailBeforeInsertHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailAfterInsertHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailAfterSelectHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailBeforeUpdateHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailAfterUpdateHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailBeforeDeleteHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailAfterDeleteHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailBeforeUpsertHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func cveDetailAfterUpsertHook(e boil.Executor, o *CveDetail) error {
	*o = CveDetail{}
	return nil
}

func testCveDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &CveDetail{}
	o := &CveDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cveDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CveDetail object: %s", err)
	}

	AddCveDetailHook(boil.BeforeInsertHook, cveDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cveDetailBeforeInsertHooks = []CveDetailHook{}

	AddCveDetailHook(boil.AfterInsertHook, cveDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cveDetailAfterInsertHooks = []CveDetailHook{}

	AddCveDetailHook(boil.AfterSelectHook, cveDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cveDetailAfterSelectHooks = []CveDetailHook{}

	AddCveDetailHook(boil.BeforeUpdateHook, cveDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cveDetailBeforeUpdateHooks = []CveDetailHook{}

	AddCveDetailHook(boil.AfterUpdateHook, cveDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cveDetailAfterUpdateHooks = []CveDetailHook{}

	AddCveDetailHook(boil.BeforeDeleteHook, cveDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cveDetailBeforeDeleteHooks = []CveDetailHook{}

	AddCveDetailHook(boil.AfterDeleteHook, cveDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cveDetailAfterDeleteHooks = []CveDetailHook{}

	AddCveDetailHook(boil.BeforeUpsertHook, cveDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cveDetailBeforeUpsertHooks = []CveDetailHook{}

	AddCveDetailHook(boil.AfterUpsertHook, cveDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cveDetailAfterUpsertHooks = []CveDetailHook{}
}
func testCveDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCveDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx, cveDetailColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCveDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = cveDetail.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCveDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CveDetailSlice{cveDetail}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCveDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CveDetails(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cveDetailDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `CveID`: `text`, `CveInfoID`: `integer`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testCveDetailsUpdate(t *testing.T) {
	t.Parallel()

	if len(cveDetailColumns) == len(cveDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	if err = cveDetail.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCveDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cveDetailColumns) == len(cveDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	cveDetail := &CveDetail{}
	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, cveDetail, cveDetailDBTypes, true, cveDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cveDetailColumns, cveDetailPrimaryKeyColumns) {
		fields = cveDetailColumns
	} else {
		fields = strmangle.SetComplement(
			cveDetailColumns,
			cveDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(cveDetail))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CveDetailSlice{cveDetail}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCveDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(cveDetailColumns) == len(cveDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	cveDetail := CveDetail{}
	if err = randomize.Struct(seed, &cveDetail, cveDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cveDetail.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert CveDetail: %s", err)
	}

	count, err := CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &cveDetail, cveDetailDBTypes, false, cveDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CveDetail struct: %s", err)
	}

	if err = cveDetail.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert CveDetail: %s", err)
	}

	count, err = CveDetails(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
