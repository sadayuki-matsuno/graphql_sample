// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testPlatforms(t *testing.T) {
	t.Parallel()

	query := Platforms(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPlatformsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = platform.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlatformsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Platforms(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlatformsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlatformSlice{platform}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPlatformsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PlatformExists(tx, platform.ID)
	if err != nil {
		t.Errorf("Unable to check if Platform exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlatformExistsG to return true, but got false.")
	}
}
func testPlatformsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	platformFound, err := FindPlatform(tx, platform.ID)
	if err != nil {
		t.Error(err)
	}

	if platformFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPlatformsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Platforms(tx).Bind(platform); err != nil {
		t.Error(err)
	}
}

func testPlatformsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Platforms(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlatformsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platformOne := &Platform{}
	platformTwo := &Platform{}
	if err = randomize.Struct(seed, platformOne, platformDBTypes, false, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}
	if err = randomize.Struct(seed, platformTwo, platformDBTypes, false, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platformOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = platformTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Platforms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlatformsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	platformOne := &Platform{}
	platformTwo := &Platform{}
	if err = randomize.Struct(seed, platformOne, platformDBTypes, false, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}
	if err = randomize.Struct(seed, platformTwo, platformDBTypes, false, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platformOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = platformTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func platformBeforeInsertHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformAfterInsertHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformAfterSelectHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformBeforeUpdateHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformAfterUpdateHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformBeforeDeleteHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformAfterDeleteHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformBeforeUpsertHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func platformAfterUpsertHook(e boil.Executor, o *Platform) error {
	*o = Platform{}
	return nil
}

func testPlatformsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Platform{}
	o := &Platform{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, platformDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Platform object: %s", err)
	}

	AddPlatformHook(boil.BeforeInsertHook, platformBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	platformBeforeInsertHooks = []PlatformHook{}

	AddPlatformHook(boil.AfterInsertHook, platformAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	platformAfterInsertHooks = []PlatformHook{}

	AddPlatformHook(boil.AfterSelectHook, platformAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	platformAfterSelectHooks = []PlatformHook{}

	AddPlatformHook(boil.BeforeUpdateHook, platformBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	platformBeforeUpdateHooks = []PlatformHook{}

	AddPlatformHook(boil.AfterUpdateHook, platformAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	platformAfterUpdateHooks = []PlatformHook{}

	AddPlatformHook(boil.BeforeDeleteHook, platformBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	platformBeforeDeleteHooks = []PlatformHook{}

	AddPlatformHook(boil.AfterDeleteHook, platformAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	platformAfterDeleteHooks = []PlatformHook{}

	AddPlatformHook(boil.BeforeUpsertHook, platformBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	platformBeforeUpsertHooks = []PlatformHook{}

	AddPlatformHook(boil.AfterUpsertHook, platformAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	platformAfterUpsertHooks = []PlatformHook{}
}
func testPlatformsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlatformsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx, platformColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlatformsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = platform.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlatformsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlatformSlice{platform}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPlatformsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Platforms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	platformDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `InstanceID`: `text`, `Name`: `text`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testPlatformsUpdate(t *testing.T) {
	t.Parallel()

	if len(platformColumns) == len(platformPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	if err = platform.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPlatformsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(platformColumns) == len(platformPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	platform := &Platform{}
	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, platform, platformDBTypes, true, platformPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(platformColumns, platformPrimaryKeyColumns) {
		fields = platformColumns
	} else {
		fields = strmangle.SetComplement(
			platformColumns,
			platformPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(platform))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PlatformSlice{platform}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPlatformsUpsert(t *testing.T) {
	t.Parallel()

	if len(platformColumns) == len(platformPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	platform := Platform{}
	if err = randomize.Struct(seed, &platform, platformDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = platform.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Platform: %s", err)
	}

	count, err := Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &platform, platformDBTypes, false, platformPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Platform struct: %s", err)
	}

	if err = platform.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Platform: %s", err)
	}

	count, err = Platforms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
