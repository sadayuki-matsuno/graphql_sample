// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testVulnInfos(t *testing.T) {
	t.Parallel()

	query := VulnInfos(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testVulnInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = vulnInfo.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVulnInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VulnInfos(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVulnInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VulnInfoSlice{vulnInfo}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testVulnInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VulnInfoExists(tx, vulnInfo.ID)
	if err != nil {
		t.Errorf("Unable to check if VulnInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VulnInfoExistsG to return true, but got false.")
	}
}
func testVulnInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	vulnInfoFound, err := FindVulnInfo(tx, vulnInfo.ID)
	if err != nil {
		t.Error(err)
	}

	if vulnInfoFound == nil {
		t.Error("want a record, got nil")
	}
}
func testVulnInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VulnInfos(tx).Bind(vulnInfo); err != nil {
		t.Error(err)
	}
}

func testVulnInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := VulnInfos(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVulnInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfoOne := &VulnInfo{}
	vulnInfoTwo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfoOne, vulnInfoDBTypes, false, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, vulnInfoTwo, vulnInfoDBTypes, false, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = vulnInfoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VulnInfos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVulnInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vulnInfoOne := &VulnInfo{}
	vulnInfoTwo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfoOne, vulnInfoDBTypes, false, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, vulnInfoTwo, vulnInfoDBTypes, false, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = vulnInfoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func vulnInfoBeforeInsertHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoAfterInsertHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoAfterSelectHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoBeforeUpdateHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoAfterUpdateHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoBeforeDeleteHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoAfterDeleteHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoBeforeUpsertHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func vulnInfoAfterUpsertHook(e boil.Executor, o *VulnInfo) error {
	*o = VulnInfo{}
	return nil
}

func testVulnInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &VulnInfo{}
	o := &VulnInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, vulnInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VulnInfo object: %s", err)
	}

	AddVulnInfoHook(boil.BeforeInsertHook, vulnInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	vulnInfoBeforeInsertHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.AfterInsertHook, vulnInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	vulnInfoAfterInsertHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.AfterSelectHook, vulnInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	vulnInfoAfterSelectHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.BeforeUpdateHook, vulnInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	vulnInfoBeforeUpdateHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.AfterUpdateHook, vulnInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	vulnInfoAfterUpdateHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.BeforeDeleteHook, vulnInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	vulnInfoBeforeDeleteHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.AfterDeleteHook, vulnInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	vulnInfoAfterDeleteHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.BeforeUpsertHook, vulnInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	vulnInfoBeforeUpsertHooks = []VulnInfoHook{}

	AddVulnInfoHook(boil.AfterUpsertHook, vulnInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	vulnInfoAfterUpsertHooks = []VulnInfoHook{}
}
func testVulnInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVulnInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx, vulnInfoColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVulnInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = vulnInfo.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVulnInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VulnInfoSlice{vulnInfo}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testVulnInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VulnInfos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vulnInfoDBTypes = map[string]string{`CpeNames`: `ARRAYcharacter varying`, `CreatedAt`: `timestamp with time zone`, `CveID`: `text`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testVulnInfosUpdate(t *testing.T) {
	t.Parallel()

	if len(vulnInfoColumns) == len(vulnInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	if err = vulnInfo.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVulnInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vulnInfoColumns) == len(vulnInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	vulnInfo := &VulnInfo{}
	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, vulnInfo, vulnInfoDBTypes, true, vulnInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vulnInfoColumns, vulnInfoPrimaryKeyColumns) {
		fields = vulnInfoColumns
	} else {
		fields = strmangle.SetComplement(
			vulnInfoColumns,
			vulnInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(vulnInfo))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VulnInfoSlice{vulnInfo}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testVulnInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(vulnInfoColumns) == len(vulnInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	vulnInfo := VulnInfo{}
	if err = randomize.Struct(seed, &vulnInfo, vulnInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = vulnInfo.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert VulnInfo: %s", err)
	}

	count, err := VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &vulnInfo, vulnInfoDBTypes, false, vulnInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VulnInfo struct: %s", err)
	}

	if err = vulnInfo.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert VulnInfo: %s", err)
	}

	count, err = VulnInfos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
