// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testScanResults(t *testing.T) {
	t.Parallel()

	query := ScanResults(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testScanResultsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = scanResult.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScanResultsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ScanResults(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScanResultsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScanResultSlice{scanResult}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testScanResultsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ScanResultExists(tx, scanResult.ID)
	if err != nil {
		t.Errorf("Unable to check if ScanResult exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScanResultExistsG to return true, but got false.")
	}
}
func testScanResultsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	scanResultFound, err := FindScanResult(tx, scanResult.ID)
	if err != nil {
		t.Error(err)
	}

	if scanResultFound == nil {
		t.Error("want a record, got nil")
	}
}
func testScanResultsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ScanResults(tx).Bind(scanResult); err != nil {
		t.Error(err)
	}
}

func testScanResultsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ScanResults(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testScanResultsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResultOne := &ScanResult{}
	scanResultTwo := &ScanResult{}
	if err = randomize.Struct(seed, scanResultOne, scanResultDBTypes, false, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}
	if err = randomize.Struct(seed, scanResultTwo, scanResultDBTypes, false, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResultOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scanResultTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ScanResults(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testScanResultsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scanResultOne := &ScanResult{}
	scanResultTwo := &ScanResult{}
	if err = randomize.Struct(seed, scanResultOne, scanResultDBTypes, false, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}
	if err = randomize.Struct(seed, scanResultTwo, scanResultDBTypes, false, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResultOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scanResultTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func scanResultBeforeInsertHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultAfterInsertHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultAfterSelectHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultBeforeUpdateHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultAfterUpdateHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultBeforeDeleteHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultAfterDeleteHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultBeforeUpsertHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func scanResultAfterUpsertHook(e boil.Executor, o *ScanResult) error {
	*o = ScanResult{}
	return nil
}

func testScanResultsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ScanResult{}
	o := &ScanResult{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scanResultDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ScanResult object: %s", err)
	}

	AddScanResultHook(boil.BeforeInsertHook, scanResultBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scanResultBeforeInsertHooks = []ScanResultHook{}

	AddScanResultHook(boil.AfterInsertHook, scanResultAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scanResultAfterInsertHooks = []ScanResultHook{}

	AddScanResultHook(boil.AfterSelectHook, scanResultAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scanResultAfterSelectHooks = []ScanResultHook{}

	AddScanResultHook(boil.BeforeUpdateHook, scanResultBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scanResultBeforeUpdateHooks = []ScanResultHook{}

	AddScanResultHook(boil.AfterUpdateHook, scanResultAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scanResultAfterUpdateHooks = []ScanResultHook{}

	AddScanResultHook(boil.BeforeDeleteHook, scanResultBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scanResultBeforeDeleteHooks = []ScanResultHook{}

	AddScanResultHook(boil.AfterDeleteHook, scanResultAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scanResultAfterDeleteHooks = []ScanResultHook{}

	AddScanResultHook(boil.BeforeUpsertHook, scanResultBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scanResultBeforeUpsertHooks = []ScanResultHook{}

	AddScanResultHook(boil.AfterUpsertHook, scanResultAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scanResultAfterUpsertHooks = []ScanResultHook{}
}
func testScanResultsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScanResultsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx, scanResultColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScanResultsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = scanResult.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testScanResultsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScanResultSlice{scanResult}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testScanResultsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ScanResults(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scanResultDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Errors`: `ARRAYcharacter varying`, `Family`: `text`, `ID`: `integer`, `Lang`: `text`, `Release`: `text`, `ScannedAt`: `timestamp with time zone`, `ServerName`: `text`, `UpdatedAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testScanResultsUpdate(t *testing.T) {
	t.Parallel()

	if len(scanResultColumns) == len(scanResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	if err = scanResult.Update(tx); err != nil {
		t.Error(err)
	}
}

func testScanResultsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scanResultColumns) == len(scanResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	scanResult := &ScanResult{}
	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, scanResult, scanResultDBTypes, true, scanResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scanResultColumns, scanResultPrimaryKeyColumns) {
		fields = scanResultColumns
	} else {
		fields = strmangle.SetComplement(
			scanResultColumns,
			scanResultPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(scanResult))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ScanResultSlice{scanResult}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testScanResultsUpsert(t *testing.T) {
	t.Parallel()

	if len(scanResultColumns) == len(scanResultPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	scanResult := ScanResult{}
	if err = randomize.Struct(seed, &scanResult, scanResultDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scanResult.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ScanResult: %s", err)
	}

	count, err := ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &scanResult, scanResultDBTypes, false, scanResultPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScanResult struct: %s", err)
	}

	if err = scanResult.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ScanResult: %s", err)
	}

	count, err = ScanResults(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
