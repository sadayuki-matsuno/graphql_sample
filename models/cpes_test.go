// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testCpes(t *testing.T) {
	t.Parallel()

	query := Cpes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCpesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = cpe.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCpesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Cpes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCpesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CpeSlice{cpe}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCpesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CpeExists(tx, cpe.ID)
	if err != nil {
		t.Errorf("Unable to check if Cpe exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CpeExistsG to return true, but got false.")
	}
}
func testCpesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	cpeFound, err := FindCpe(tx, cpe.ID)
	if err != nil {
		t.Error(err)
	}

	if cpeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCpesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Cpes(tx).Bind(cpe); err != nil {
		t.Error(err)
	}
}

func testCpesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Cpes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCpesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpeOne := &Cpe{}
	cpeTwo := &Cpe{}
	if err = randomize.Struct(seed, cpeOne, cpeDBTypes, false, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}
	if err = randomize.Struct(seed, cpeTwo, cpeDBTypes, false, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cpeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Cpes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCpesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cpeOne := &Cpe{}
	cpeTwo := &Cpe{}
	if err = randomize.Struct(seed, cpeOne, cpeDBTypes, false, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}
	if err = randomize.Struct(seed, cpeTwo, cpeDBTypes, false, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = cpeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func cpeBeforeInsertHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeAfterInsertHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeAfterSelectHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeBeforeUpdateHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeAfterUpdateHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeBeforeDeleteHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeAfterDeleteHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeBeforeUpsertHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func cpeAfterUpsertHook(e boil.Executor, o *Cpe) error {
	*o = Cpe{}
	return nil
}

func testCpesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Cpe{}
	o := &Cpe{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cpeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Cpe object: %s", err)
	}

	AddCpeHook(boil.BeforeInsertHook, cpeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cpeBeforeInsertHooks = []CpeHook{}

	AddCpeHook(boil.AfterInsertHook, cpeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cpeAfterInsertHooks = []CpeHook{}

	AddCpeHook(boil.AfterSelectHook, cpeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cpeAfterSelectHooks = []CpeHook{}

	AddCpeHook(boil.BeforeUpdateHook, cpeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cpeBeforeUpdateHooks = []CpeHook{}

	AddCpeHook(boil.AfterUpdateHook, cpeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cpeAfterUpdateHooks = []CpeHook{}

	AddCpeHook(boil.BeforeDeleteHook, cpeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cpeBeforeDeleteHooks = []CpeHook{}

	AddCpeHook(boil.AfterDeleteHook, cpeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cpeAfterDeleteHooks = []CpeHook{}

	AddCpeHook(boil.BeforeUpsertHook, cpeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cpeBeforeUpsertHooks = []CpeHook{}

	AddCpeHook(boil.AfterUpsertHook, cpeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cpeAfterUpsertHooks = []CpeHook{}
}
func testCpesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCpesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx, cpeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCpesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = cpe.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCpesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CpeSlice{cpe}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCpesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Cpes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cpeDBTypes = map[string]string{`CpeName`: `text`, `CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Edition`: `text`, `ID`: `integer`, `JVNID`: `integer`, `Language`: `text`, `NVDID`: `integer`, `Part`: `text`, `Product`: `text`, `UpdatedAt`: `timestamp with time zone`, `Vendor`: `text`, `VendorUpdate`: `text`, `Version`: `text`}
	_          = bytes.MinRead
)

func testCpesUpdate(t *testing.T) {
	t.Parallel()

	if len(cpeColumns) == len(cpePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	if err = cpe.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCpesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cpeColumns) == len(cpePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	cpe := &Cpe{}
	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, cpe, cpeDBTypes, true, cpePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cpeColumns, cpePrimaryKeyColumns) {
		fields = cpeColumns
	} else {
		fields = strmangle.SetComplement(
			cpeColumns,
			cpePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(cpe))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CpeSlice{cpe}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCpesUpsert(t *testing.T) {
	t.Parallel()

	if len(cpeColumns) == len(cpePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	cpe := Cpe{}
	if err = randomize.Struct(seed, &cpe, cpeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = cpe.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Cpe: %s", err)
	}

	count, err := Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &cpe, cpeDBTypes, false, cpePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cpe struct: %s", err)
	}

	if err = cpe.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Cpe: %s", err)
	}

	count, err = Cpes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
