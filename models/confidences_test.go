// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testConfidences(t *testing.T) {
	t.Parallel()

	query := Confidences(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testConfidencesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = confidence.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfidencesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Confidences(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfidencesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ConfidenceSlice{confidence}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testConfidencesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ConfidenceExists(tx, confidence.ID)
	if err != nil {
		t.Errorf("Unable to check if Confidence exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConfidenceExistsG to return true, but got false.")
	}
}
func testConfidencesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	confidenceFound, err := FindConfidence(tx, confidence.ID)
	if err != nil {
		t.Error(err)
	}

	if confidenceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testConfidencesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Confidences(tx).Bind(confidence); err != nil {
		t.Error(err)
	}
}

func testConfidencesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Confidences(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConfidencesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidenceOne := &Confidence{}
	confidenceTwo := &Confidence{}
	if err = randomize.Struct(seed, confidenceOne, confidenceDBTypes, false, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}
	if err = randomize.Struct(seed, confidenceTwo, confidenceDBTypes, false, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidenceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = confidenceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Confidences(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConfidencesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	confidenceOne := &Confidence{}
	confidenceTwo := &Confidence{}
	if err = randomize.Struct(seed, confidenceOne, confidenceDBTypes, false, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}
	if err = randomize.Struct(seed, confidenceTwo, confidenceDBTypes, false, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidenceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = confidenceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func confidenceBeforeInsertHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceAfterInsertHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceAfterSelectHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceBeforeUpdateHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceAfterUpdateHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceBeforeDeleteHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceAfterDeleteHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceBeforeUpsertHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func confidenceAfterUpsertHook(e boil.Executor, o *Confidence) error {
	*o = Confidence{}
	return nil
}

func testConfidencesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Confidence{}
	o := &Confidence{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, confidenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Confidence object: %s", err)
	}

	AddConfidenceHook(boil.BeforeInsertHook, confidenceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	confidenceBeforeInsertHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.AfterInsertHook, confidenceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	confidenceAfterInsertHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.AfterSelectHook, confidenceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	confidenceAfterSelectHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.BeforeUpdateHook, confidenceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	confidenceBeforeUpdateHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.AfterUpdateHook, confidenceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	confidenceAfterUpdateHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.BeforeDeleteHook, confidenceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	confidenceBeforeDeleteHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.AfterDeleteHook, confidenceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	confidenceAfterDeleteHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.BeforeUpsertHook, confidenceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	confidenceBeforeUpsertHooks = []ConfidenceHook{}

	AddConfidenceHook(boil.AfterUpsertHook, confidenceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	confidenceAfterUpsertHooks = []ConfidenceHook{}
}
func testConfidencesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfidencesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx, confidenceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfidencesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = confidence.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testConfidencesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ConfidenceSlice{confidence}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testConfidencesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Confidences(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	confidenceDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `DetectionMethod`: `text`, `ID`: `integer`, `Score`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testConfidencesUpdate(t *testing.T) {
	t.Parallel()

	if len(confidenceColumns) == len(confidencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	if err = confidence.Update(tx); err != nil {
		t.Error(err)
	}
}

func testConfidencesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(confidenceColumns) == len(confidencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	confidence := &Confidence{}
	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, confidence, confidenceDBTypes, true, confidencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(confidenceColumns, confidencePrimaryKeyColumns) {
		fields = confidenceColumns
	} else {
		fields = strmangle.SetComplement(
			confidenceColumns,
			confidencePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(confidence))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ConfidenceSlice{confidence}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testConfidencesUpsert(t *testing.T) {
	t.Parallel()

	if len(confidenceColumns) == len(confidencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	confidence := Confidence{}
	if err = randomize.Struct(seed, &confidence, confidenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = confidence.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Confidence: %s", err)
	}

	count, err := Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &confidence, confidenceDBTypes, false, confidencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Confidence struct: %s", err)
	}

	if err = confidence.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Confidence: %s", err)
	}

	count, err = Confidences(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
