// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testAuths(t *testing.T) {
	t.Parallel()

	query := Auths(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAuthsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = auth.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Auths(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthSlice{auth}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAuthsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AuthExists(tx, auth.ID)
	if err != nil {
		t.Errorf("Unable to check if Auth exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthExistsG to return true, but got false.")
	}
}
func testAuthsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	authFound, err := FindAuth(tx, auth.ID)
	if err != nil {
		t.Error(err)
	}

	if authFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAuthsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Auths(tx).Bind(auth); err != nil {
		t.Error(err)
	}
}

func testAuthsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Auths(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authOne := &Auth{}
	authTwo := &Auth{}
	if err = randomize.Struct(seed, authOne, authDBTypes, false, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}
	if err = randomize.Struct(seed, authTwo, authDBTypes, false, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Auths(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authOne := &Auth{}
	authTwo := &Auth{}
	if err = randomize.Struct(seed, authOne, authDBTypes, false, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}
	if err = randomize.Struct(seed, authTwo, authDBTypes, false, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func authBeforeInsertHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authAfterInsertHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authAfterSelectHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authBeforeUpdateHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authAfterUpdateHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authBeforeDeleteHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authAfterDeleteHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authBeforeUpsertHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func authAfterUpsertHook(e boil.Executor, o *Auth) error {
	*o = Auth{}
	return nil
}

func testAuthsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Auth{}
	o := &Auth{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Auth object: %s", err)
	}

	AddAuthHook(boil.BeforeInsertHook, authBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authBeforeInsertHooks = []AuthHook{}

	AddAuthHook(boil.AfterInsertHook, authAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authAfterInsertHooks = []AuthHook{}

	AddAuthHook(boil.AfterSelectHook, authAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authAfterSelectHooks = []AuthHook{}

	AddAuthHook(boil.BeforeUpdateHook, authBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authBeforeUpdateHooks = []AuthHook{}

	AddAuthHook(boil.AfterUpdateHook, authAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authAfterUpdateHooks = []AuthHook{}

	AddAuthHook(boil.BeforeDeleteHook, authBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authBeforeDeleteHooks = []AuthHook{}

	AddAuthHook(boil.AfterDeleteHook, authAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authAfterDeleteHooks = []AuthHook{}

	AddAuthHook(boil.BeforeUpsertHook, authBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authBeforeUpsertHooks = []AuthHook{}

	AddAuthHook(boil.AfterUpsertHook, authAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authAfterUpsertHooks = []AuthHook{}
}
func testAuthsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx, authColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = auth.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAuthsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthSlice{auth}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAuthsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Auths(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authDBTypes = map[string]string{`Auth`: `text`, `CreatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testAuthsUpdate(t *testing.T) {
	t.Parallel()

	if len(authColumns) == len(authPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	if err = auth.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAuthsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authColumns) == len(authPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	auth := &Auth{}
	if err = randomize.Struct(seed, auth, authDBTypes, true, authColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, auth, authDBTypes, true, authPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authColumns, authPrimaryKeyColumns) {
		fields = authColumns
	} else {
		fields = strmangle.SetComplement(
			authColumns,
			authPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(auth))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AuthSlice{auth}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAuthsUpsert(t *testing.T) {
	t.Parallel()

	if len(authColumns) == len(authPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	auth := Auth{}
	if err = randomize.Struct(seed, &auth, authDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = auth.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Auth: %s", err)
	}

	count, err := Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &auth, authDBTypes, false, authPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Auth struct: %s", err)
	}

	if err = auth.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Auth: %s", err)
	}

	count, err = Auths(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
